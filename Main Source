-- Astra UI Library
local AstraUI = {}

-- Serviços
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

-- Configurações
AstraUI.Themes = {
    Dark = {
        Primary = Color3.fromRGB(103, 58, 183),
        Secondary = Color3.fromRGB(76, 175, 80),
        Background = Color3.fromRGB(15, 15, 15),
        Surface = Color3.fromRGB(25, 25, 25),
        Surface2 = Color3.fromRGB(35, 35, 35),
        Text = Color3.fromRGB(255, 255, 255),
        TextSecondary = Color3.fromRGB(180, 180, 180),
        Accent = Color3.fromRGB(255, 64, 129),
        Success = Color3.fromRGB(76, 175, 80),
        Error = Color3.fromRGB(244, 67, 54),
        Warning = Color3.fromRGB(255, 193, 7)
    },
    Light = {
        Primary = Color3.fromRGB(103, 58, 183),
        Secondary = Color3.fromRGB(76, 175, 80),
        Background = Color3.fromRGB(245, 245, 245),
        Surface = Color3.fromRGB(255, 255, 255),
        Surface2 = Color3.fromRGB(240, 240, 240),
        Text = Color3.fromRGB(0, 0, 0),
        TextSecondary = Color3.fromRGB(100, 100, 100),
        Accent = Color3.fromRGB(255, 64, 129),
        Success = Color3.fromRGB(76, 175, 80),
        Error = Color3.fromRGB(244, 67, 54),
        Warning = Color3.fromRGB(255, 193, 7)
    }
}

AstraUI.Flags = {}
AstraUI.Tabs = {}
AstraUI.Connections = {}
AstraUI.Configs = {}
AstraUI.CurrentTheme = "Dark"

-- Funções utilitárias
function AstraUI:Tween(Object, Properties, Duration, Style, Direction)
    local TweenInfo = TweenInfo.new(Duration or 0.3, Style or Enum.EasingStyle.Quad, Direction or Enum.EasingDirection.Out)
    local Tween = TweenService:Create(Object, TweenInfo, Properties)
    Tween:Play()
    return Tween
end

function AstraUI:CreateElement(ClassName, Properties)
    local Element = Instance.new(ClassName)
    for Property, Value in pairs(Properties) do
        if Property == "Parent" then
            Value = Value
        else
            Element[Property] = Value
        end
    end
    return Element
end

function AstraUI:CreateRoundCorner(Parent, Radius)
    local Corner = self:CreateElement("UICorner", {
        CornerRadius = UDim.new(0, Radius or 6),
        Parent = Parent
    })
    return Corner
end

function AstraUI:CreateStroke(Parent, Color, Thickness)
    local Stroke = self:CreateElement("UIStroke", {
        Color = Color or Color3.new(1, 1, 1),
        Thickness = Thickness or 1,
        Parent = Parent
    })
    return Stroke
end

function AstraUI:CreatePadding(Parent, Padding)
    local Padding = self:CreateElement("UIPadding", {
        PaddingLeft = UDim.new(0, Padding),
        PaddingRight = UDim.new(0, Padding),
        PaddingTop = UDim.new(0, Padding),
        PaddingBottom = UDim.new(0, Padding),
        Parent = Parent
    })
    return Padding
end

-- Sistema de Notificações
function AstraUI:MakeNotification(Config)
    local Theme = self.Themes[self.CurrentTheme]
    
    local Notification = self:CreateElement("Frame", {
        Name = "Notification",
        Size = UDim2.new(0, 300, 0, 80),
        Position = UDim2.new(1, 10, 1, -90),
        BackgroundColor3 = Theme.Surface,
        BorderSizePixel = 0,
        ClipsDescendants = true,
        Parent = self.NotificationContainer
    })
    
    self:CreateRoundCorner(Notification, 8)
    self:CreateStroke(Notification, Theme.Surface2, 1)
    
    local Icon = self:CreateElement("ImageLabel", {
        Name = "Icon",
        Size = UDim2.new(0, 24, 0, 24),
        Position = UDim2.new(0, 15, 0, 15),
        BackgroundTransparency = 1,
        Image = Config.Image or "rbxassetid://7072718364",
        Parent = Notification
    })
    
    local Title = self:CreateElement("TextLabel", {
        Name = "Title",
        Size = UDim2.new(1, -60, 0, 20),
        Position = UDim2.new(0, 50, 0, 15),
        BackgroundTransparency = 1,
        Text = Config.Name or "Notification",
        TextColor3 = Theme.Text,
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Notification
    })
    
    local Content = self:CreateElement("TextLabel", {
        Name = "Content",
        Size = UDim2.new(1, -60, 0, 35),
        Position = UDim2.new(0, 50, 0, 35),
        BackgroundTransparency = 1,
        Text = Config.Content or "Content",
        TextColor3 = Theme.TextSecondary,
        TextSize = 14,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true,
        Parent = Notification
    })
    
    local ProgressBar = self:CreateElement("Frame", {
        Name = "ProgressBar",
        Size = UDim2.new(1, 0, 0, 3),
        Position = UDim2.new(0, 0, 1, -3),
        BackgroundColor3 = Theme.Primary,
        BorderSizePixel = 0,
        Parent = Notification
    })
    
    -- Animação de entrada
    self:Tween(Notification, {Position = UDim2.new(1, -310, 1, -90)}, 0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
    
    -- Animação da barra de progresso
    local ProgressTween = self:Tween(ProgressBar, {Size = UDim2.new(0, 0, 0, 3)}, Config.Time or 5)
    
    task.spawn(function()
        ProgressTween.Completed:Wait()
        self:Tween(Notification, {Position = UDim2.new(1, 10, 1, -90)}, 0.3)
        task.wait(0.3)
        Notification:Destroy()
    end)
    
    return Notification
end

-- Sistema de Tooltip
function AstraUI:CreateTooltip(Parent, Text)
    local Tooltip = self:CreateElement("Frame", {
        Name = "Tooltip",
        Size = UDim2.new(0, 200, 0, 0),
        BackgroundColor3 = self.Themes[self.CurrentTheme].Surface2,
        BorderSizePixel = 0,
        Visible = false,
        ZIndex = 100,
        Parent = Parent
    })
    
    self:CreateRoundCorner(Tooltip, 6)
    
    local TextLabel = self:CreateElement("TextLabel", {
        Name = "Text",
        Size = UDim2.new(1, -10, 1, -10),
        Position = UDim2.new(0, 5, 0, 5),
        BackgroundTransparency = 1,
        Text = Text,
        TextColor3 = self.Themes[self.CurrentTheme].Text,
        TextSize = 12,
        Font = Enum.Font.Gotham,
        TextWrapped = true,
        Parent = Tooltip
    })
    
    TextLabel:GetPropertyChangedSignal("TextBounds"):Connect(function()
        Tooltip.Size = UDim2.new(0, 200, 0, TextLabel.TextBounds.Y + 10)
    end)
    
    return Tooltip
end

-- Janela Principal
function AstraUI:MakeWindow(Config)
    local Window = {}
    local Theme = self.Themes[self.CurrentTheme]
    
    -- Configurações
    Window.Name = Config.Name or "Astra UI"
    Window.HidePremium = Config.HidePremium or false
    Window.SaveConfig = Config.SaveConfig or false
    Window.ConfigFolder = Config.ConfigFolder or "AstraConfig"
    Window.IntroEnabled = Config.IntroEnabled or true
    Window.IntroText = Config.IntroText or "Astra UI"
    Window.IntroIcon = Config.IntroIcon or ""
    Window.Icon = Config.Icon or ""
    Window.CloseCallback = Config.CloseCallback or function() end
    
    -- Criar GUI principal
    local ScreenGui = self:CreateElement("ScreenGui", {
        Name = "AstraUIMain",
        DisplayOrder = 999,
        ResetOnSpawn = false
    })
    
    local MainContainer = self:CreateElement("Frame", {
        Name = "MainContainer",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Parent = ScreenGui
    })
    
    -- Container de notificações
    self.NotificationContainer = self:CreateElement("Frame", {
        Name = "NotificationContainer",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Parent = MainContainer
    })
    
    -- Tela de introdução
    if Window.IntroEnabled then
        local IntroFrame = self:CreateElement("Frame", {
            Name = "IntroFrame",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundColor3 = Theme.Background,
            Parent = MainContainer
        })
        
        local IntroIcon = self:CreateElement("ImageLabel", {
            Name = "IntroIcon",
            Size = UDim2.new(0, 100, 0, 100),
            Position = UDim2.new(0.5, -50, 0.5, -70),
            BackgroundTransparency = 1,
            Image = Window.IntroIcon,
            Parent = IntroFrame
        })
        
        local IntroText = self:CreateElement("TextLabel", {
            Name = "IntroText",
            Size = UDim2.new(0, 300, 0, 40),
            Position = UDim2.new(0.5, -150, 0.5, 40),
            BackgroundTransparency = 1,
            Text = Window.IntroText,
            TextColor3 = Theme.Text,
            TextSize = 24,
            Font = Enum.Font.GothamBold,
            Parent = IntroFrame
        })
        
        -- Animação de introdução
        task.spawn(function()
            self:Tween(IntroIcon, {Rotation = 360}, 2, Enum.EasingStyle.Quad)
            task.wait(2.5)
            self:Tween(IntroFrame, {BackgroundTransparency = 1}, 0.5)
            task.wait(0.5)
            IntroFrame:Destroy()
        end)
    end
    
    -- Janela principal
    local MainFrame = self:CreateElement("Frame", {
        Name = "MainFrame",
        Size = UDim2.new(0, 600, 0, 450),
        Position = UDim2.new(0.5, -300, 0.5, -225),
        BackgroundColor3 = Theme.Background,
        BorderSizePixel = 0,
        ClipsDescendants = true,
        Parent = MainContainer
    })
    
    self:CreateRoundCorner(MainFrame, 12)
    self:CreateStroke(MainFrame, Theme.Surface2, 2)
    
    -- Header
    local Header = self:CreateElement("Frame", {
        Name = "Header",
        Size = UDim2.new(1, 0, 0, 45),
        BackgroundColor3 = Theme.Surface,
        BorderSizePixel = 0,
        Parent = MainFrame
    })
    
    self:CreateRoundCorner(Header, {TopLeft = 12, TopRight = 12, BottomLeft = 0, BottomRight = 0})
    
    local Title = self:CreateElement("TextLabel", {
        Name = "Title",
        Size = UDim2.new(0, 200, 1, 0),
        Position = UDim2.new(0, 15, 0, 0),
        BackgroundTransparency = 1,
        Text = Window.Name,
        TextColor3 = Theme.Text,
        TextSize = 18,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Header
    })
    
    local CloseButton = self:CreateElement("ImageButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 25, 0, 25),
        Position = UDim2.new(1, -35, 0.5, -12.5),
        BackgroundColor3 = Theme.Error,
        Image = "",
        Parent = Header
    })
    
    self:CreateRoundCorner(CloseButton, 4)
    
    local CloseIcon = self:CreateElement("TextLabel", {
        Name = "CloseIcon",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = "×",
        TextColor3 = Theme.Text,
        TextSize = 20,
        Font = Enum.Font.GothamBold,
        Parent = CloseButton
    })
    
    -- Container de abas
    local TabContainer = self:CreateElement("Frame", {
        Name = "TabContainer",
        Size = UDim2.new(0, 140, 1, -45),
        Position = UDim2.new(0, 0, 0, 45),
        BackgroundColor3 = Theme.Surface,
        BorderSizePixel = 0,
        Parent = MainFrame
    })
    
    local TabListLayout = self:CreateElement("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    })
    
    local TabPadding = self:CreatePadding(TabContainer, 10)
    
    -- Container de conteúdo
    local ContentContainer = self:CreateElement("ScrollingFrame", {
        Name = "ContentContainer",
        Size = UDim2.new(1, -140, 1, -45),
        Position = UDim2.new(0, 140, 0, 45),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarImageColor3 = Theme.Primary,
        ScrollBarThickness = 3,
        Parent = MainFrame
    })
    
    local ContentLayout = self:CreateElement("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10)
    })
    
    local ContentPadding = self:CreatePadding(ContentContainer, 15)
    
    -- Drag functionality
    local Dragging = false
    local DragInput, DragStart, StartPosition
    
    Header.InputBegan:Connect(function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = true
            DragStart = Input.Position
            StartPosition = MainFrame.Position
            
            Input.Changed:Connect(function()
                if Input.UserInputState == Enum.UserInputState.End then
                    Dragging = false
                end
            end)
        end
    end)
    
    Header.InputChanged:Connect(function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseMovement then
            DragInput = Input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(Input)
        if Input == DragInput and Dragging then
            local Delta = Input.Position - DragStart
            MainFrame.Position = UDim2.new(
                StartPosition.X.Scale, 
                StartPosition.X.Offset + Delta.X,
                StartPosition.Y.Scale, 
                StartPosition.Y.Offset + Delta.Y
            )
        end
    end)
    
    -- Close button functionality
    CloseButton.MouseButton1Click:Connect(function()
        Window.CloseCallback()
        self:Destroy()
    end)
    
    -- Função para criar abas
    function Window:MakeTab(Config)
        local Tab = {}
        Tab.Name = Config.Name or "Nova Aba"
        Tab.Icon = Config.Icon or ""
        Tab.PremiumOnly = Config.PremiumOnly or false
        Tab.Visible = false
        
        -- Botão da aba
        local TabButton = self:CreateElement("TextButton", {
            Name = "TabButton_" .. Config.Name,
            Size = UDim2.new(1, 0, 0, 40),
            BackgroundColor3 = Theme.Surface2,
            Text = "",
            AutoButtonColor = false,
            Parent = TabContainer
        })
        
        self:CreateRoundCorner(TabButton, 6)
        
        local ButtonContent = self:CreateElement("Frame", {
            Name = "Content",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Parent = TabButton
        })
        
        local TabIcon = self:CreateElement("ImageLabel", {
            Name = "Icon",
            Size = UDim2.new(0, 20, 0, 20),
            Position = UDim2.new(0, 10, 0.5, -10),
            BackgroundTransparency = 1,
            Image = Config.Icon or "rbxassetid://7072718364",
            ImageColor3 = Theme.TextSecondary,
            Parent = ButtonContent
        })
        
        local TabLabel = self:CreateElement("TextLabel", {
            Name = "Label",
            Size = UDim2.new(1, -40, 1, 0),
            Position = UDim2.new(0, 35, 0, 0),
            BackgroundTransparency = 1,
            Text = Config.Name,
            TextColor3 = Theme.TextSecondary,
            TextSize = 14,
            Font = Enum.Font.Gotham,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = ButtonContent
        })
        
        local TabIndicator = self:CreateElement("Frame", {
            Name = "Indicator",
            Size = UDim2.new(0, 3, 0, 0),
            Position = UDim2.new(0, 0, 0.5, 0),
            BackgroundColor3 = Theme.Primary,
            BorderSizePixel = 0,
            Visible = false,
            Parent = TabButton
        })
        
        self:CreateRoundCorner(TabIndicator, 2)
        
        -- Conteúdo da aba
        local TabContent = self:CreateElement("ScrollingFrame", {
            Name = "TabContent_" .. Config.Name,
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Visible = false,
            ScrollBarImageColor3 = Theme.Primary,
            ScrollBarThickness = 3,
            Parent = ContentContainer
        })
        
        local TabContentLayout = self:CreateElement("UIListLayout", {
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10)
        })
        
        local TabContentPadding = self:CreatePadding(TabContent, 5)
        
        -- Função para ativar/desativar aba
        function Tab:SetActive(Active)
            if Active then
                -- Desativar outras abas
                for _, OtherTab in pairs(self.Tabs or {}) do
                    if OtherTab ~= Tab then
                        OtherTab:SetActive(false)
                    end
                end
                
                -- Ativar esta aba
                self:Tween(TabIndicator, {Size = UDim2.new(0, 3, 0, 20), Position = UDim2.new(0, 0, 0.5, -10)}, 0.2)
                TabIndicator.Visible = true
                self:Tween(TabButton, {BackgroundColor3 = Theme.Surface}, 0.2)
                self:Tween(TabLabel, {TextColor3 = Theme.Text}, 0.2)
                self:Tween(TabIcon, {ImageColor3 = Theme.Text}, 0.2)
                TabContent.Visible = true
                Tab.Visible = true
            else
                self:Tween(TabIndicator, {Size = UDim2.new(0, 3, 0, 0), Position = UDim2.new(0, 0, 0.5, 0)}, 0.2)
                task.delay(0.2, function()
                    if not Tab.Visible then
                        TabIndicator.Visible = false
                    end
                end)
                self:Tween(TabButton, {BackgroundColor3 = Theme.Surface2}, 0.2)
                self:Tween(TabLabel, {TextColor3 = Theme.TextSecondary}, 0.2)
                self:Tween(TabIcon, {ImageColor3 = Theme.TextSecondary}, 0.2)
                TabContent.Visible = false
                Tab.Visible = false
            end
        end
        
        -- Click handler
        TabButton.MouseButton1Click:Connect(function()
            Tab:SetActive(true)
        end)
        
        -- Adicionar elementos (continuará no próximo código devido ao limite de caracteres)
        function Tab:AddButton(Config)
            local Button = {}
            
            local ButtonFrame = self:CreateElement("TextButton", {
                Name = "Button",
                Size = UDim2.new(1, 0, 0, 40),
                BackgroundColor3 = Theme.Surface2,
                Text = "",
                AutoButtonColor = false,
                Parent = TabContent
            })
            
            self:CreateRoundCorner(ButtonFrame, 6)
            self:CreateStroke(ButtonFrame, Theme.Surface, 1)
            
            local ButtonLabel = self:CreateElement("TextLabel", {
                Name = "Label",
                Size = UDim2.new(1, -20, 1, 0),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                Text = Config.Name,
                TextColor3 = Theme.Text,
                TextSize = 14,
                Font = Enum.Font.Gotham,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = ButtonFrame
            })
            
            local ButtonIcon = self:CreateElement("ImageLabel", {
                Name = "Icon",
                Size = UDim2.new(0, 20, 0, 20),
                Position = UDim2.new(1, -30, 0.5, -10),
                BackgroundTransparency = 1,
                Image = "rbxassetid://7072721530",
                ImageColor3 = Theme.TextSecondary,
                Parent = ButtonFrame
            })
            
            -- Hover effects
            ButtonFrame.MouseEnter:Connect(function()
                self:Tween(ButtonFrame, {BackgroundColor3 = Theme.Surface}, 0.2)
                self:Tween(ButtonIcon, {ImageColor3 = Theme.Primary}, 0.2)
            end)
            
            ButtonFrame.MouseLeave:Connect(function()
                self:Tween(ButtonFrame, {BackgroundColor3 = Theme.Surface2}, 0.2)
                self:Tween(ButtonIcon, {ImageColor3 = Theme.TextSecondary}, 0.2)
            end)
            
            ButtonFrame.MouseButton1Click:Connect(function()
                self:Tween(ButtonFrame, {BackgroundColor3 = Theme.Primary}, 0.1)
                self:Tween(ButtonFrame, {BackgroundColor3 = Theme.Surface2}, 0.1)
                Config.Callback()
            end)
            
            return Button
        end
        
        function Tab:AddToggle(Config)
            local Toggle = {}
            local Value = Config.Default or false
            
            local ToggleFrame = self:CreateElement("Frame", {
                Name = "Toggle",
                Size = UDim2.new(1, 0, 0, 40),
                BackgroundTransparency = 1,
                Parent = TabContent
            })
            
            local ToggleLabel = self:CreateElement("TextLabel", {
                Name = "Label",
                Size = UDim2.new(0.7, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = Config.Name,
                TextColor3 = Theme.Text,
                TextSize = 14,
                Font = Enum.Font.Gotham,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = ToggleFrame
            })
            
            local ToggleButton = self:CreateElement("TextButton", {
                Name = "ToggleButton",
                Size = UDim2.new(0, 50, 0, 25),
                Position = UDim2.new(1, -60, 0.5, -12.5),
                BackgroundColor3 = Value and Theme.Primary or Theme.Surface2,
                Text = "",
                AutoButtonColor = false,
                Parent = ToggleFrame
            })
            
            self:CreateRoundCorner(ToggleButton, 12)
            self:CreateStroke(ToggleButton, Theme.Surface, 1)
            
            local ToggleKnob = self:CreateElement("Frame", {
                Name = "Knob",
                Size = UDim2.new(0, 21, 0, 21),
                Position = UDim2.new(0, Value and 27 or 2, 0.5, -10.5),
                BackgroundColor3 = Theme.Text,
                Parent = ToggleButton
            })
            
            self:CreateRoundCorner(ToggleKnob, 10)
            
            function Toggle:Set(NewValue)
                Value = NewValue
                self:Tween(ToggleButton, {BackgroundColor3 = Value and Theme.Primary or Theme.Surface2}, 0.2)
                self:Tween(ToggleKnob, {Position = UDim2.new(0, Value and 27 or 2, 0.5, -10.5)}, 0.2)
                Config.Callback(Value)
            end
            
            ToggleButton.MouseButton1Click:Connect(function()
                Toggle:Set(not Value)
            end)
            
            if Config.Flag then
                self.Flags[Config.Flag] = Toggle
            end
            
            return Toggle
        end
        
        -- Ativar primeira aba
        if not Window.FirstTab then
            Window.FirstTab = Tab
            Tab:SetActive(true)
        end
        
        table.insert(self.Tabs, Tab)
        return Tab
    end
    
    -- Salvar referências
    self.Window = Window
    self.ScreenGui = ScreenGui
    
    return Window
end

-- Função de inicialização
function AstraUI:Init()
    print("🚀 Astra UI Inicializada!")
    self:MakeNotification({
        Name = "Astra UI",
        Content = "Interface carregada com sucesso!",
        Time = 5,
        Image = "rbxassetid://7072718364"
    })
end

-- Função para destruir
function AstraUI:Destroy()
    if self.ScreenGui then
        self.ScreenGui:Destroy()
    end
end

return AstraUI
